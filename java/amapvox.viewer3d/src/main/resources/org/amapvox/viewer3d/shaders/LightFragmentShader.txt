#version 140

uniform mat4 viewMatrix;
uniform vec3 lightPosition;

in vec3 fragPosition;
in vec3 fragNormal;
in vec3 fragColor;

out vec4 outColor;
 
void main()
{
    vec3 mambient = vec3(0.2, 0.2, 0.2);
    vec3 mdiffuse = fragColor;
    vec3 mspecular = vec3(1.0, 1.0, 1.0);
    float shininess = 32.0;

    vec3 lambient = vec3(1.0, 1.0, 1.0);
    vec3 ldiffuse = vec3(1.0, 1.0, 1.0);
    vec3 lspecular = vec3(1.0, 1.0, 1.0);


    vec3 ambient = mambient*lambient;

    vec3 surf2light = normalize(lightPosition-fragPosition);
    vec3 norm = normalize(fragNormal);
    float dcont = max(0.0, dot(norm, surf2light));
    vec3 diffuse=dcont*mdiffuse*ldiffuse;
    
    vec3 surface2view = normalize(-fragPosition);
    vec3 reflection = reflect(norm, -surf2light);

    float scont = pow(max(0.0, dot(surface2view, reflection)), shininess);
    vec3 specular = scont*lspecular*mspecular;
    
    outColor = vec4(ambient+diffuse+specular, 1.0);
}